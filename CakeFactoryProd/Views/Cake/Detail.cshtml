@model CakeFactoryProd.ViewModels.CakeOrderVM;

@{
    ViewData["Title"] = "Cake Order";
}

<input hidden id="dt" value="">


<div class="cake-detail-container">
    <div class="cake-detail-top">
        <div class="cake-detail-image">
            @if (Model.CakeVM.CakeId == 0)
            {
                <img src="~/images/emptyCake.jpg" id = "cake-image" alt="TEST-IMAGE-PLACEHOLDER" />
            }
            else
            {
                <img src="data:image/png;base64, @Convert.ToBase64String(Model.CakeVM.ImageCake)" id="cake-image" alt="@Model.CakeVM.ImageName" />
                @*<img src="~/images/@Model.CakeVM.CakeImage" alt="@Model.CakeVM.Name" />        *@
            }

        </div>
        <div class="cake-detail-info">
            @if (Model.CakeVM.CakeId == 0)

            {
                <h2>Custom Cake</h2>
                <p>$50.00 - $100.00</p>
                <h4>
                    Create the cake of your dreams with our customizable cake option. You can also add a personalized message or design to make your cake even more special.
                    Our team of expert bakers will craft your custom cake to perfection, using only the freshest ingredients.
                    Whether you're celebrating a birthday, wedding, or any other occasion, our customizable cakes are sure to impress.
                    Place your order today and let us bring your cake vision to life!
                </h4>
            }
            else
            {
                <h2>@Model.CakeVM.Name</h2>
                <p>$@String.Format("{0:0.00}", Model.CakeVM.Price)</p>
                <h4>@Model.CakeVM.Description</h4>
            }

            <a asp-controller="Home" asp-action="Index">Back to the cakes!</a>
        </div>
    </div>
    <div class="cake-edit-container">
        <form class="cake-order-form" method="post" action="/cart">
            <input type="hidden" name="name" value="@Model.CakeVM.Name" />
            <input type="hidden" name="description" value="@Model.CakeVM.Description " />
            <input type="hidden" id = "imagePath" name="imagePath"/>
            <input type="hidden" name="description" value="@Model.CakeVM.Description " />
            <input type="hidden" name="Accepted" id="Accepted" />

            <div class="cake-size-shape">
                <h2>Select a size and shape</h2>


                @if (Model.CakeVM.CakeId == 0)
                {
                    <input type="hidden" name="CakeId" class="property" value="@Model.CakeVM.CakeId" />
                    <label asp-for="Sizes" class="property">Size</label>

                    <select name="Sizes" class="cake-sel-size"
                        id="Sizes" onchange="updateTotal(this)">
                        @foreach (var item in Model.Sizes)
                        {
                            <option value="@item.Id"
                                data-price="@item.CakeBasicPrice"
                                data-prop="size" >
                                @item.Value
                            </option>
                        }
                    </select>
                    <br/>

                    <label asp-for="Shapes"class="property">Shape</label>
                    <select name="Shapes" class="cake-sel-size" 
                        id="Shapes" onchange="updateTotal(this)">
                        @*<option value="0" data-price=0 data-prop="shape">Select Option</option>*@
                        @foreach (var item in Model.Shapes)
                        {
                            <option 
                                value="@item.Id" 
                                data-price="@item.PriceFactor"
                                data-prop="shape"
                            >
                                @item.Value
                            </option>
                        }
                    </select>
                    <br/>
                    <label asp-for="Fillings"class="property">Filling</label>
                    <select name="Fillings" class="cake-sel-size"
                        id="Fillings" onchange="updateTotal(this)">
                        @*<option value="0" data-price="0" data-prop="filling">Select Option</option>*@
                        @foreach (var item in Model.Fillings)
                        {
                            <option value="@item.Id"
                            data-price="@item.PriceFactor"
                            data-prop="filling">
                                @item.Flavor
                            </option>
                        }
                    </select>
                    <br/>


                    <label asp-for="Toppings"class="property">Topping</label>
                    <div class="cake-edit-topping-contianer">
                        @foreach (var topping in Model.Toppings)
                        {
                            <input type="checkbox" class="property" id="topping" name="Accepted" 
                                value="@topping.Id" data-id="@topping.Id" data-price="@topping.PriceFactor"
                                onchange="updateTotal(this, 'toppingsFlag')"
                            >
                            @topping.Flavor
                        }
                    </div>
                }

                else
                {
                    <label asp-for="@Model.CakeVM.SizeId"class="property" >Size: </label>
                    <select name="Sizes" class="cake-sel-size"
                        id="Sizes" onchange="updateTotal(this)" disabled>
                        @foreach (var item in Model.Sizes)
                        {
                            <option value="@item.Id"
                            >
                                    @item.Value
                            </option>
                        }
                    </select>
                    <br />
                    <label asp-for="@Model.CakeVM.ShapeId"class="property" >Shape: </label>
                    <select name="Shapes" class="cake-sel-size"
                        id="Shapes" onchange="updateTotal(this)" disabled>
                        @foreach (var item in Model.Shapes)
                        {
                            <option value="@item.Id">
                                @item.Value
                            </option>
                        }
                    </select>
                    <br />
                    <label asp-for="@Model.CakeVM.FillingId"class="property" >Filling: </label>
                    <select name="Fillings" class="cake-sel-size"
                        id="Fillings" onchange="updateTotal(this)" disabled>
                        @foreach (var item in Model.Fillings)
                        {
                            <option value="@item.Id">
                                @item.Flavor
                            </option>
                        }
                    </select>
                    <br />
                    <label asp-for="Toppings" class="property">Topping</label>
                    <div class="cake-edit-topping-contianer">
                        @foreach (var topping in Model.Toppings)
                        {
                            var validIndex = false;
                            try
                            {
                                validIndex = Model.CakeVM.SelectedToppings[Model.Toppings.IndexOf(topping)]?.ToppingId == topping.Id;
                            }
                            catch (System.ArgumentOutOfRangeException e)
                            {
                                validIndex = false;
                            }
                            <input type="checkbox" class="property" id="topping" name="Accepted" disabled
                                value="@topping.Id" data-id="@topping.Id" data-price="@topping.PriceFactor"
                                @(validIndex ? "checked" : "") >
                            @topping.Flavor

                        }
                    </div>
                    @*<label asp-for="@Model.CakeVM.Toppings" class="property">Toppings: </label>
                    <span>
                        @foreach (var topping in Model.CakeVM.SelectedToppings)
                        {
                            <span class="h3">@topping.Flavor </span>
                        }
                    </span>*@
                    <input type="hidden" name="Sizes" class="property" value="@Model.CakeVM.SizeId" />
                    <input type="hidden" name="Shapes" class="property" value="@Model.CakeVM.ShapeId" />
                    <input type="hidden" name="Fillings" class="property" value="@Model.CakeVM.FillingId" />
                    <input type="hidden" name="Toppings" class="property" value="@Model.CakeVM.ToppingId" />
                    <input type="hidden" name="CakeId" class="property" value="@Model.CakeVM.CakeId" />
                }

            </div>
            <div class="cake-pickup-date">
                <h2>Pickup Date</h2>
                <input asp-for="PickupDate" type="date" id="datePicker" required>
        </div>
        <div class="cake-to-cart-container">
            <h2>Quantity</h2>
            <input type="number" min="1" max="3" placeholder="Qty" id="quantity" name="quantity-input" 
                value="@Model.Quantity" onchange="updateQuantity()" >
            <span><b>$ </b></span>
            <input readonly name="total" id="total" value="@Model.CakeVM.Price.ToString("0.00")" style="padding-left: 1rem" />
            <button type="submit" id="btAddToCart">Add to Cart</button>
        </div>
       </form>
    </div>
    <div class="cake-detail-info-container">
        <h2>Important Information</h2>
        <ul>
            <li>We require 48 hours Notice for all cake pre-orders.</li>
            <li>If the product is “Out of Stock” it is for the current week only. New cakes are added every Saturday for future dates.</li>
            <li>Make sure you select the correct date and pick up time prior to payment.</li>
            <li>We are unable to accommodate special cake and pastry requests.</li>
            <li>We strongly suggest that you place your orders in advance as we have LIMITED quantities.</li>
        </ul>
        <h2>Cancelation Policy</h2>
        <h3>We understand, sometimes plans change. Here are the details:</h3>
        <ul>
            <li>Up to 72 hours prior to pickup – We are sorry, we are unable to refund, exchange or cancel your order because it is already in process.</li>
            <li>Between 4 and 7 days- We will offer you an in store credit for the value of your order.</li>
            <li>With 8 days notice and beyond- A full credit will be issued at our earliest convenience, and we hope to see you back soon!</li>
        </ul>
    </div>

    <script>
        let quantity = document.getElementById("quantity");
        let total_field = document.getElementById("total");
        let toppings = document.querySelectorAll('input[name="Accepted"]')
        let basicPrice = total_field.value || 0;
        //let basicPrice = 0;
        console.log("basic price:::::::::::::; ", basicPrice);
        let fillingFactor = 0;
        let shapeFactor = 0;
        let additionals = 0;
        let temp = 0;
        let messageFee = 0.00;
        let toppingTotal = 0;
        let totalCakePrice = basicPrice;

        //console.log("toppings" + toppings)
        //toppings.forEach(checkbox => {
        //    checkbox.addEventListener('change', (event) => {
        //        updateTopping()
        //    });
        //})

        //function checkTopping(item) {
        //    var isChecked = $(item).is(':checked');
        //    console.log("item checked: ", item, " - checked: ", isChecked);
        //}


        function updateQuantity(temp) {

            //if (temp) basicPrice = temp;
            console.log("quantity.value: ", quantity.value, "temp: ", temp, "basicPrice: ", basicPrice, temp, total_field.value);
            if (!temp && Number(total_field.value) == 0)
            //if (Number(total_field.value) == 0)
                return quantity.value = 1;

            if (temp) 
                //total_field.value = (basicPrice * quantity.value).toFixed(2)
                total_field.value = (temp * quantity.value).toFixed(2)
            else {
                if (quantity.value <= 0)
                    quantity.value = 1;
                //total_field.value = (total_field.value * quantity.value).toFixed(2)
                total_field.value = (totalCakePrice * quantity.value).toFixed(2)
            }
        }

        //function updateTopping(){
        //    console.log("updateTopping")
        //    let totalPrice = 0;
        //    let checkedToppings = document.querySelectorAll('input[name="Toppings"]:checked')

        //    checkedToppings.forEach(topping => {
        //        console.log(topping);
        //        let toppingId = topping.dataset.id;
        //        let toppingPrice = topping.dataset.price;
        //        totalPrice += parseFloat(toppingPrice);
        //    });
        //    total_field.value = (total_field.value + totalPrice).toFixed(2)
        //}

        function updateTotal(el, toppingsFlag) {
            if (toppingsFlag) {
                console.log("call checkitoppings", $(el));
                var isChecked = $(el).is(':checked');
                var tempPrice = $(el).data('price');
                if (isChecked)
                    toppingTotal += tempPrice
                else 
                    toppingTotal -= tempPrice;
                console.log("item checked: ", " - checked: ", isChecked, tempPrice);
            } else {
                //basicPrice = total_field.value || 0;
                console.log("updatetotal: ", el);
                const dataArray = Array.from(el);
                const value = el.value;
                //const cakePropName = dataArray[value - 1].attributes[2].value;
                //const cakePropValue = dataArray[value - 1].attributes[1].value;
                const tempArr = dataArray.filter(e => e.attributes[0].value == value);
                const cakePropName = tempArr[0].attributes[2].value;
                const cakePropValue = tempArr[0].attributes[1].value;
                //console.log("updatetotal: ", value, cakePropName, cakePropValue);

                if (cakePropName == "size") {
                    basicPrice = cakePropValue;
                    console.log("basicPrice: ", basicPrice);
                } else if (cakePropName == "filling"){
                    fillingFactor = cakePropValue;
                    console.log("filling", cakePropName, cakePropValue);
                } else if (cakePropName == "shape"){
                    shapeFactor = cakePropValue;
                    console.log("shape!!!!!!!!!!!!!!!!!", cakePropName, cakePropValue, shapeFactor);
                }
            }

            //let totalPrice = 0;
            //let checkedToppings = document.querySelectorAll('input[name="Accepted"]:checked')

            //checkedToppings.forEach(topping => {
            //    console.log(topping);
            //    let toppingId = topping.dataset.id;
            //    let toppingPrice = topping.dataset.price;
            //    totalPrice += parseFloat(toppingPrice);
            //});
            //console.log("Topping total " + totalPrice)
            //toppingTotal = totalPrice;

            console.log("basic price: ", basicPrice, "ShapeFactor: ", (shapeFactor/100)*basicPrice, "FillingFactor: ", fillingFactor);
            additionals = (basicPrice * ((Number(shapeFactor) + Number(fillingFactor)) / 100)) + Number(toppingTotal);
            console.log("additionals " + additionals, ((shapeFactor + fillingFactor) / 100));
            temp = Number(basicPrice) + Number(additionals);
            totalCakePrice = temp;
            updateQuantity(temp);
        }

        

        var currentDate = new Date();
        for (var i = 0; i < 30; i++) {
            var nextDate = new Date(currentDate);
            nextDate.setDate(currentDate.getDate() + i);
            // Skip over Monday and Tuesday
            if (nextDate.getDay() == 1 || nextDate.getDay() == 2) {
                continue;
            }
             //Check if the day falls on a Wednesday through Sunday
            if (nextDate.getDay() >= 3 && nextDate.getDay() <= 6) {
                var maxDate = nextDate.toISOString().slice(0, 10);

                // Set the minimum value for the date picker to the current day
                if (i == 0) {
                    document.getElementById("datePicker").min = currentDate.toISOString().slice(0, 10);
                }

                // Set the maximum value for the date picker
                document.getElementById("datePicker").max = maxDate;
            }
        }

        // it checks whether the selected cake has price zero
        // or customer did not set cake's properties
        // if so does not submit form
        document.getElementById("btAddToCart").addEventListener("click", function (ev) {
            const shapes = document.getElementById("Shapes").value;
            const fillings = document.getElementById("Fillings").value;
            console.log("fillings: ", shapes, fillings, toppingTotal);
            if (total_field.value == 0 || shapes == 0 || fillings == 0) {
                console.log("NOPEEEEEEEEE");
                alert("Please, select a valid cake setting :)");
                ev.preventDefault();
                return;
            }
        });

        let cakeImage = document.getElementById("cake-image");
        let imageField = document.getElementById("imagePath");

        imageField.value = cakeImage.src
    </script>