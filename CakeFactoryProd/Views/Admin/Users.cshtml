
@using CakeFactoryProd.Utilities
@model PaginatedList<UserVM>
@using CakeFactoryProd.ViewModels
@{
    ViewData["Title"] = "Cake Factory";
    Layout = "~/Views/Shared/Admin/_AdminLayout.cshtml";

}

<h1>Users</h1>

<form asp-action="Users" method="get">
    <div class="form-row">
        <div class="">
            <label for="SearchString">Search on Name:</label>
            <div class="input-group">
                <input type="text" name="SearchString" id="SearchString"
                       value="@ViewData["currentFilter"]" class="form-control mr-2" required />
                <div class="input-group-append">
                    <button type="submit" class="btn btn-primary ml-1">Search</button>
                    <a asp-action="Users" class="btn btn-secondary">Reset</a>
                </div>
            </div>
        </div>
    </div>
</form>
<table class="table">
    <thead>
        <tr>

            <th>Id</th>
         
            <th>User Name</th>
          
            <th>PhoneNumber</th>

           <th>
                <a asp-action="Users" asp-route-sortOrder="@ViewData["EmailSortParm"]">Email</a>
            </th>

            @*<th>
                @Html.DisplayNameFor(model => model.IsActive)
            </th>*@
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {

         @*   @if (User.IsInRole("admin"))
            {
                <p>Welcome, admin!</p>
            }*@
        <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.UserId)
                </td>
           
            <td>
                    @Html.DisplayFor(modelItem => item.UserName)
            </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PhoneNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
         
                </td>
        @*    <td>
                @Html.DisplayFor(modelItem => item.IsActive)
            </td>*@
            <td>
                    <a asp-controller="User" asp-action="EditUserByAdmin" asp-route-id="@item.UserId">Edit</a> |
                    <a asp-controller="User" asp-action="Details" asp-route-id="@item.UserId">Details</a> 
                   @* <a asp-controller="User" asp-action="Delete" asp-route-id="@item.Id">Delete</a>*@
            </td>
        </tr>
}
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Users"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Users"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
